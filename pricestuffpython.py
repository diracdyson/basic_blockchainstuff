# -*- coding: utf-8 -*-
"""price blockchainapcap.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10sQHLfrfZIHfv4ojHE57TvvO1LUHegbY
"""

## this was ran on google colab 
!pip install web3
!pip install --force-reinstall jsonschema==3.2.0

import web3
import json
from web3 import Web3, HTTPProvider


class blockchain():

    def __init__(self,addy):
        self.addy=addy
   

        self.web3_connection=Web3(Web3.HTTPProvider('https://kovan.infura.io/v3/efda9444cc71428e9c57389aef87abbe'))
    #self.abi = json.loads('[{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"description","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint80","name":"_roundId","type":"uint80"}],"name":"getRoundData","outputs":[{"internalType":"uint80","name":"roundId","type":"uint80"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint80","name":"answeredInRound","type":"uint80"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"latestRoundData","outputs":[{"internalType":"uint80","name":"roundId","type":"uint80"},{"internalType":"int256","name":"answer","type":"int256"},{"internalType":"uint256","name":"startedAt","type":"uint256"},{"internalType":"uint256","name":"updatedAt","type":"uint256"},{"internalType":"uint80","name":"answeredInRound","type":"uint80"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}]')
# Price Feed address
  #def __str__(self):
    #print(self.web3_connection.isConnected())
#addr = Web3.toChecksumAddress('0x9326BFA02ADD2366b30bacB125260Af641031331')
# Set up contract instance
# Make call to latestRoundData()
    def pricefeed(self):
        self.contract = self.web3_connection.eth.contract(address=self.addy, abi=abi)
        latestData = contract.functions.latestRoundData().call()
        return latestData



addrUSD = Web3.toChecksumAddress('0x9326BFA02ADD2366b30bacB125260Af641031331')
ostuff=blockchain(addrUSD)
print(ostuff.pricefeed()[1])
print(ostuff.__str__())
#stuff2=blockchain(addrUSDC)
#print(ostuff2.pricefeed())  
#print(web3_connection.eth.fromWei(pricefeed(addrUSD)[1]),'ether')
#print(web3_connection.eth.block_number)

#print(web3_connection.eth.get_balance(Web3.toChecksumAddress('0x488d37010378120a3e9010952888381c8fef4941')))







